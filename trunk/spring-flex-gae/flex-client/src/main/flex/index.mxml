<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:com="com.flashdev.file.*" 
	xmlns:inc="incubator.spring_flex.views.*" 
	xmlns:order="incubator.spring_flex.views.order.*" 
	backgroundGradientAlphas="[1.0, 1.0]" creationComplete="initApp()"
	paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0"
	backgroundGradientColors="[#E9FFC7, #F1FAE3]" layout="horizontal" borderColor="#FFFFFF" >
	
	<mx:Style>
		Application {
			font-size: 12;
		}
	</mx:Style>
	 
	<mx:Script>
		<![CDATA[
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.managers.PopUpManager;
			import incubator.spring_flex.components.InfoPopup;
			import incubator.spring_flex.components.Login;
			import incubator.spring_flex.events.CustomerEvent;
			import incubator.spring_flex.dto.Order;
			import incubator.spring_flex.dto.Pizza;
			import incubator.spring_flex.dto.Ingredient;
			import incubator.spring_flex.dto.Customer;
			import incubator.spring_flex.dto.OrderedDish;
			import incubator.spring_flex.dto.Dish;
			import mx.controls.Alert;
			import incubator.spring_flex.events.PageChangeEvent;
			import mx.collections.ArrayCollection;
			import mx.collections.ListCollectionView;

			private var loginPopup:Login;
			
			private var customer:Customer;
			private var order:Order;
			private var popup:InfoPopup;
			
			[Bindable]
			private var loggedInUser:String;
			
			private function initApp() : void {
				// First check authentication
				securityHelper.getAuthentication();
			}

			private function userHandler(event:ResultEvent) : void {
				if(event.result != null){
					loggedInUser = event.result.name;
				}
			}
			
			private function logout() : void {
				securityHelper.channelSet.logout();
				loggedInUser = null;
				firePageChange_Home();
			}

			private function faultHandler(event:FaultEvent) : void {
				Alert.show(event.fault.faultString, "Error accessing securityHelper");
			}
			
			private function onPageChange(event:PageChangeEvent) : void {
				
				if(event.targetPage == PageChangeEvent.HOME) {
					viewStack.selectedChild = home;
					
				} else if(event.targetPage == PageChangeEvent.PHONESEARCH) {
					viewStack.selectedChild = phonesearch;
					
				} else if(event.targetPage == PageChangeEvent.CUSTOMER_ADD) {
					customer_add.phoneNumber = phonesearch.phone;
					viewStack.selectedChild = customer_add;
					
				} else if(event.targetPage == PageChangeEvent.ORDER_SHOW) {
					order_show.customer = this.customer;
					viewStack.selectedChild = order_show;
				}
			}
			
			private function firePageChange_Home() : void {
				viewStack.selectedChild = home;
			}
			
			private function onCustomerChanged(event:CustomerEvent) : void {
				if(event.action == CustomerEvent.CUSTOMER_CREATED || 
				   			event.action == CustomerEvent.CUSTOMER_CHANGED){
					this.customer = event.customer;
				}
			}
			
			private function openLoginPromt() : void {
				loginPopup = new Login();
				loginPopup.onLoggedIn = onLoggedIn;
				PopUpManager.addPopUp(loginPopup, this, true);
				PopUpManager.centerPopUp(loginPopup);
			}
			
			private function onLoggedIn() : void {
				loggedInUser = loginPopup.loggedInUser;
				loginPopup = null;
			}
			
			private function machBackendCall() : void {
				customerService.createDemoUser();
			}
			
			private function getAll() : void {
				customerService.getAllCustomers();
			}
			
			private function getAllOrders() : void {
				orderService.getAllOrders();
			}
			
			private function getAllPizzas() : void {
				pizzaService.getAllPizzas();
			}
			
			private function helloResult(event:ResultEvent): void {
				var res:Boolean = event.result as Boolean;
				Alert.show("helloResult: " + res, "");
			}
			
			private function helloFault(event:FaultEvent): void {
				Alert.show("helloFault: " + event.fault.faultString, "");
			}
			
			private function getAllResult(event:ResultEvent): void {
				var res:ArrayCollection = event.result as ArrayCollection;
				var info:String = "Anzahl gespeicherter Kunden:" + res.length + "\n---------------\n";
				for (var i:int = 0; i < res.length; i++){
					var stData:String = "";
					var c:Customer = res.getItemAt(i) as Customer;
					stData = stData + 'ID=' + c.key;
					stData = stData + ', Firstname=' + c.firstname;    
					stData = stData + ', Lastname=' + c.lastname;
					stData = stData + ', Phone=' + c.phone;
					stData = stData + ', PLZ=' + c.postal;
					stData = stData + ', Street=' + c.street;
					stData = stData + ', City=' + c.city;
					stData = stData + "\n---------------\n";
					
					info = new String(info + stData);
   				}
								
				popup = new InfoPopup();
				popup.cancellabe =true;
				popup.onCancel = onCancelHandler;
				popup.info = info;
				popup.width=750;
				popup.height=600;
				popup.title= "Alle gespeicherten Kunden";
				
				PopUpManager.addPopUp(popup, this, true);
				PopUpManager.centerPopUp(popup);
			}

			private function getAllOrdersResult(event:ResultEvent): void {
				var res:ArrayCollection = event.result as ArrayCollection;
				
				var info:String = "Anzahl gespeicherter Bestellungen:" + res.length + "\n---------------\n";
				for (var i:int = 0; i < res.length; i++){
					var o:Order = res.getItemAt(i) as Order;
					var stData:String = "";
					stData = stData + 'ID=' + o.id;
					stData = stData + ', Customer=' + o.customer.firstname;    
					stData = stData + ', Dishes=[';   
					var orderedDishes:ListCollectionView =  o.orderedDishes;
					if(orderedDishes != null){
						for (var j:int = 0; j < orderedDishes.length; j++){
							var orderedDish:OrderedDish = orderedDishes.getItemAt(j) as OrderedDish;
							stData = stData + '(' + orderedDish.dish.name + ',' + orderedDish.amount + ')';
						}
					}
					stData = stData + ']';   
					stData = stData + "\n---------------\n";
					
					info = new String(info + stData);
   				}
								
				popup = new InfoPopup();
				popup.cancellabe =true;
				popup.onCancel = onCancelHandler;
				popup.info = info;
				popup.width=750;
				popup.height=600;
				popup.title= "Alle gespeicherten Bestellungen";
				
				PopUpManager.addPopUp(popup, this, true);
				PopUpManager.centerPopUp(popup);
			}

			private function getAllPizzasResult(event:ResultEvent): void {
				var res:ArrayCollection = event.result as ArrayCollection;
				var info:String = "Azahl gespeicherter Pizzen:" + res.length + "\n---------------\n";
				for (var i:int = 0; i < res.length; i++){
					var p:Pizza = res.getItemAt(i) as Pizza;
					var stData:String = "";
					stData = stData + 'key=' + p.key;
					stData = stData + ', name=' + p.name;
					stData = stData + ', price=' + p.price;
					stData = stData + ', pizzaType=' + p.pizzaType;
					stData = stData + ', ingredients=[';
					for(var j:int = 0; j<p.ingredients.length; j++){
						var ingredient:Ingredient = p.ingredients.getItemAt(j) as Ingredient;
						stData = stData + ingredient.name;
						if(j+1 < p.ingredients.length){
						stData = stData + ', ';
						}
					}
					stData = stData + ']';
					stData = stData + "\n---------------\n";
					
					info = new String(info + stData);
				}
				popup = new InfoPopup();
				popup.cancellabe =true;
				popup.onCancel = onCancelHandler;
				popup.info = info;
				popup.width=750;
				popup.height=600;
				popup.title= "Alle gespeicherten Pizzen";
				
				PopUpManager.addPopUp(popup, this, true);
				PopUpManager.centerPopUp(popup);
			}
			
			private function onCancelHandler() : void {
				PopUpManager.removePopUp(popup);
				popup = null;
			}		
			
			private function getAllFault(event:FaultEvent): void {
				Alert.show("getAllFault: " + event.fault.faultString, "");
			}
			
		]]>
	</mx:Script>
    
	<mx:RemoteObject id="securityHelper" destination="securityHelper" fault="faultHandler(event)">
		<mx:method name="getAuthentication" result="userHandler(event)"/>
	</mx:RemoteObject>
	<mx:RemoteObject id="customerService" destination="customerService">
		<mx:method name="createDemoUser" result="helloResult(event)"  fault="helloFault(event)"/>
		<mx:method name="getAllCustomers" result="getAllResult(event)"  fault="getAllFault(event)"/>
	</mx:RemoteObject>
	<mx:RemoteObject id="orderService" destination="orderService">
		<mx:method name="getAllOrders" result="getAllOrdersResult(event)"  fault="getAllFault(event)"/>
	</mx:RemoteObject>
	<mx:RemoteObject id="pizzaService" destination="pizzaService">
		<mx:method name="getAllPizzas" result="getAllPizzasResult(event)"  fault="getAllFault(event)"/>
	</mx:RemoteObject>
	
	<mx:Blur id="blur" duration="500"/>
	
	<mx:VBox width="100%" height="100%" horizontalAlign="center"  paddingTop="20" paddingBottom="20">
		<mx:VBox width="100%" height="100%" horizontalAlign="center"  >
			<mx:Panel width="800" height="100%" layout="vertical" horizontalAlign="center"  >
				<mx:HBox width="100%">
					<mx:HBox width="100%" horizontalAlign="center" paddingTop="10" > 
						<mx:Image id="loadedImage" source="@Embed('/icons/header.jpg')" click="firePageChange_Home()"
								  useHandCursor="true" buttonMode="true"/>
					</mx:HBox>
				</mx:HBox>
				<mx:HBox width="100%" horizontalAlign="right" paddingRight="15">
					<mx:HBox width="100%" horizontalAlign="left">
						<mx:LinkButton label="Demo User" textDecoration="underline" themeColor="#6FB063" click="machBackendCall()" toolTip="Demo Benutzer erstellen: Name=Demo, Telefon=11111"/>
						<mx:LinkButton label="Kunden" textDecoration="underline" themeColor="#6FB063" click="getAll()" toolTip="Alle gespeicherten Kunden anzeigen"/>
						<mx:LinkButton label="Bestellungen" textDecoration="underline" themeColor="#6FB063" click="getAllOrders()" toolTip="Alle gespeicherten Bestellungen anzeigen"/>
						<mx:LinkButton label="Pizzen" textDecoration="underline" themeColor="#6FB063" click="getAllPizzas()" toolTip="Alle gespeicherten Pizzen anzeigen"/>
					</mx:HBox>
					<mx:LinkButton label="Login" color="#0B8024" textDecoration="underline" fontWeight="bold" themeColor="#6FB063"
									click="openLoginPromt()" visible="{loggedInUser == null}" includeInLayout="{loggedInUser == null}" />
					<mx:HBox verticalAlign="middle">
						<mx:Label text="Benutzer" visible="{loggedInUser != null}" includeInLayout="{loggedInUser != null}" fontWeight="bold"/>			
						<mx:Label text="{loggedInUser}  |" visible="{loggedInUser != null}" includeInLayout="{loggedInUser != null}" />			
						<mx:LinkButton label="Logout" color="#0B8024" textDecoration="underline" fontWeight="bold" themeColor="#6FB063"
									click="logout()" visible="{loggedInUser != null}" includeInLayout="{loggedInUser != null}" 
									paddingLeft="0"/>
						
					</mx:HBox>
				</mx:HBox>

				<mx:ViewStack id="viewStack" width="95%" height="100%" >
					<inc:home id="home" changePage="onPageChange(event)" showEffect="{blur}"/>
					<inc:phonesearch id="phonesearch" changePage="onPageChange(event)" customerEvent="onCustomerChanged(event)" showEffect="{blur}"/>
					<inc:customer_add id="customer_add" changePage="onPageChange(event)" customerEvent="onCustomerChanged(event)" showEffect="{blur}"/>
					<inc:order id="order_show" changePage="onPageChange(event)" showEffect="{blur}"/>
				</mx:ViewStack>
				
				<mx:HBox width="95%" height="40" verticalAlign="bottom">
					<mx:HBox width="100%" horizontalAlign="center" paddingBottom="15">
						<mx:Label text="Pizza Bestellportal mit Spring, Flex und BlazeDS" />
					</mx:HBox>
				</mx:HBox>		
			</mx:Panel>
		</mx:VBox>
	</mx:VBox>
	
</mx:Application>