
Migration der Pizza4U-Anwendung auf GAE war toll, jedoch gravierenden Nachteilen unterworfen
- Domain-Modell muss wegen keiner polymorphen Beziehungen umstrukturiert werden
	- bei größeren Modellen nicht praktikabel (Lesbarkeit, Wartung, ...)
- Nichteinhaltung von Java EE Standards ist bei komplexen professionellen Anwendunen ein KO-Kriterium
- Zudem begibt man sich in die Abhängigkeit eines propritären Herstellers
	- Abhängig von Release-Zyklen --> wann und wird JPA2 unterstützt
- etablierte Bibliotheken wie Richfaces werden nicht unterstützt / Einsatz nicht möglicht

Was bedeutet das?
- Können diese Nachteile/Probleme gelöst/umgangen werden, indem auf eine andere Cloud migriert wird?
- Welche Möglichkeiten gibt es für die bestehende Pizza4U Anwendung? (d.h. Spring, Flex, BlazeDS, Maven, JPA)
- Die bisherige Lösung wurde auf PaaS-Ebene erzielt (und führte zu den genannten Problemeb/Nachteilen)
	- Gibt es Alternativen auf Paas-Ebene? 
	-> YES! Cloud Foundry

Eine Alternative bietet die auf Amazon's EC basierende Cloud Foundry, welche eine Laufzeitumgebung für auf 
Spring basierende Anwednungen bietet. Die hier zugrunde liegende Cloud ist Amazon's EC2. Damit haben wir eine 
PaaS-Umgebung auf der IaaS Clod von Amazon - na wenn das nicht coooooool ist.

Mit Cloud Foundry wird eine Spezialiserung bzw. Laufzeitumgebung für Java EE Anwendungen auf der EC von Amazon geboten. Hierbei 
wird ein festes Paket von eingesetzten Technologien wie Spring, Tomcat und MySQL vorgegeben.

Vorteile für große Multimedia-Konzerne mit zahlreichen Portal-Anwendungen:
- Aufbau einer privaten Cloud auf IaaS-Ebene
- Erweiterung der privaten Cloud um PaaS-Ebene mit einer Laufzeitumgebung wie Cloud Foundry
Hierdurch ergeben sich also unter anderem die folgenden Vorteile / der folgende Nutzen:
  - Schnelles und einfaches Deplyoment von Anwendungen
  - Vorkonfiguriertes Load-Balancing
  - Master-Slave-Datenbank (Slave als Live-Kopie)
  - Einfaches Monitoring und Management
  - Automatische Lastverteilung / Skalierung
  - Self-Healing (Erkennen abgestürzter / überlasteter Server)
  - Volle Kontrolle über:
    - Maximale Anzahl der Instanzen
    - Load-Balancer Konfiguration
    - Datenbank-Backups
  - Jede beliebige Spring-Anwendung kann ohne Modifikationen mit Cloud Foundry auf der Cloud deployed werden (Ist das wirklich so)
  
!!!Laut Forrester Research wird der PaaS-Markt weiter kräftig wachsen und 2016 ein Volumen von 15 Milliarden US-$ erreichen!!!

Also, was wollen/machen wir?
Pizza4U im Originalzustand auf Foundry deployen und der vorherigen Lösung gegebüber stellen. Was ist besser?

Ausblick:   Wie kann eine eigene Laufzeitumgebung für andere Profile/Pakete (nicht Spring, also z.B. Seam, EJB, Ruby, Grails) 
            auf der EC2 realisieren (siehe michael.txt). Oder gibt es gar schon hierzu alternative Paas-Anbieter?
Ausblick 2: Realisierung einer hybriden Cloud. Also eine Java EE Anwednung auf zwei Clouds verteilen. Also auch  Aspekte 
			wie Sicherheit (also private Cloud) einbringen
			
#####################

// Das klingt sehr vielversprechend, da man seine Anwendung nun nicht mehr an die Cloud-Umgebung anpasst, sondern die Umgebung direkt 
// auf die Anwendung zuschneiden kann.

Im theoretischen Teil beleuchten wir Cloud Foundry und die Vorteile und Möglichkeiten, die sich aus dieser und einer PaaS ergeben.
