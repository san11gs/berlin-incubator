INFO

Neue Welten - Java EE in der Cloud
(Neue Welten - Java EE mit Spring und Flex in der Cloud)
wir schicken Ihnen heute wie besprochen die gewünschten Dokumente. Eine Anmerkung zum Abstract: Beim Ausarbeiten des Themenkomplexes haben wir festgestellt, dass die Menge der in unserer Beispielanwendung eingesetzten Technologien den Umfang eines Artikels sprengen würde. Daher betrachten wir in dem Artikel nur einen Teil und setzen den Fokus auf das Zusammenspiel von Java EE und GAE. Uns liegt aber eigentlich sehr viel daran, die Ganzheitlichkeit der Thematik zu beleuchten, da meistens nur ausgewählte Technologien separat betrachtet werden.

Daher der Vorschlag von uns, einen weiteren Artikel zum Thema Spring + Flex/Air zu veröffentlichen. Oder fänden Sie eine Serie besser geeignet?

Wir freuen uns auf ein kurzes Feedback.


Umfang: 21.3. eine Version an mich zu senden - vielleicht klappt's ja doch noch.Umfang wären 5 Wordseiten inkl. Bilder + Listings

Stil siehe: JS_Formatierungsrichtlinien
http://www.sigs-datacom.de/fachzeitschriften/javaspektrum/hinweise-fuer-autoren/aufruf-zu-beitraegen.html
14.000 und 22.000 Zeichen haben (ohne Leerzeichen)

Links:
http://in.relation.to/Bloggers/WeldJSF20AndGoogleAppEngineNavigatingTheMinefieldPart1
http://in.relation.to/Bloggers/WeldJSF20AndGoogleAppEngineNavigatingTheMinefieldPart2

- Verwendung von CDI (@Inject statt @Autowire)??


    * Was genau verbirgt sich hinter Cloud Computing?
    * Welche Plattformen existieren und was sind deren charekteristischen Eigenschaften, Vorteile aber auch Grenzen?
    * Wie nutzt der Java-Entwickler oder -Architekt diese Plattformen effektiv?
    * Welche Entwicklungswerkzeuge unterstützen die Entwicklung von Cloud-Applikationen am besten?
    * Wie schaut es mit Interoperabilitätsaspekten aus?
    * Welche Anwendungsdomänen sind für die Nutzung von Cloud-Technologien prädestiniert?
    * Welche Beispielsanwendungen gibt es bereits?

Schedule:
- Fertig bis  19.
- Review bis 21. 15:Uhr
- Abgabe 21. bis 24.00 Uhr

Review (Artikel und Link zur Anwendung):
- Thomas (the brain)
- Frank Ratzlow (+ code Review)
- Jan Groth
- Torsten Fink
- Alexandra Döring
- Steffi (Stil)

--------------------------------------------------------------------------------

Neue Welten - Java EE in der Cloud

--------------------------------------------------------------------------------
Einleitung
--------------------------------------------------------------------------------
Pizza4U

Um den nächsten Wachstumsschritt zu meistern, entschließt sich ein aufstrebendes Start-Up-Unternehmen dazu, Investoren aufzunehmen. 
Die dadurch erlangten größeren finanziellen Mittel ermöglichen den Start einer Marketing-Kampagne inklusive TV-Werbung. Der Werbespot erreicht ein großes Publikum, 
führt jedoch leider auch zum Zusammenbruch des Servers. Der erhoffte Effekt der Marketing-Kampagne ist verpufft und potentielle Neukunden sind abgeschreckt. 
Damit es zu keinem erneuten Zusammenbruch des Servers kommt, muss schnellstmöglich eine dynamisch skalierbare und dennoch kostengünstige Lösung her.

Im Rahmen des Artikels soll aufgezeigt werden, wie man ein Java-EE-Projekt mit möglichst geringem Aufwand auf die GAE migrieren und dabei 
weiterhin die JPA als Persistenz-Framework nutzen kann. Dabei wird die Entscheidung für die Wahl der Cloud beleuchtet. Es wird diskutiert, 
welche Probleme und Anforderungen sich für die zu migrierende Java EE Anwendung ergeben - hierzu zählen zum Beispiel die Auswirkungen des 
Paradigmenkonflikts vom relationalen Datenbankmodell mit Google's BigTable. Mit "DataNucleus" stellen wir eine JPA-Implementierung für 
die Persistenzschicht der GAE vor.


--------------------------------------------------------------------------------
Die Projekt-Struktur
--------------------------------------------------------------------------------
Pizza4U stellt uns die kompletten Sourcen seiner Web-Anwendung zur Verfügung.
Die Anwendung basiert auf Spring 3 im Backend, und Flex im Frontend. Der Build-Prozess wird mittels Maven organisiert.
Bezüglich Infratruktur wird MySQL Datenbank und JBossAS als Applikatins-Server eingesetzt.

Die Beispiel-Anwendung basiert auf folgenden Technologien:
 - Spring 3
 - Maven 2
 - Flex 3.3
 - GAE 1.3.1
 - DataNucleus 1.15


Um ein Gefühl für die Anwendung und damit für mögliche Probleme bei der geplanten Umstellung zu bekommen, werden die folgenden Kern-Technologien kurz vertieft.

* Spring
Spring ist ein leichtgewichtiges, auf POJO(Plain Old Java Objects) basierendes Programmiermodell, welches einen alternativen Entwicklungs-Ansatz zur Entwrpise Entwicklung mit EJB (Enterprise Java Beans) darsetellt.
Der Zugriff auf den persistenten Datenbestand erfolgt mittel JPA/Hibernate. Spring verwendet eigens Transaktionshandling und ein eigenes Sicherheits-Konzeot in Form von Spring Security.
 

Maven
------
Maven ist ein Tool für das Build-Management.
Das Prjoekt ist in mehrere Module aufgeteilt.
- 
-
-


Flex
------
Der Kunde zielt primär auf den Neukundenmarkt und hat daher einen starkes Fokus auf die Oberfläche. Aus diesem Grund setzt die bestehende Anwendung auf die Frontend-Technologie Flex. 
Nach dem Kompilieren entsteht eine Flash-Datei die im Brower abgespielt wird und mittels AMF-Protokoll über HTTP mit dem Backend kommuniziert. Das Flash wirdi initial komplett in den Client geladen,
weshalb die Anwendung auch bei einer hohen Anzahl grafischer Effekte sehr flüssig und geschmeidig wirkt. Knackpunkt stellen erforderliche Backend-Zugriffe wie bespielksweise das Abschicken einer Bestellung.

Das Kompilieren der Flex-Anwendung sowie das Generieren der erforderlichen Value Objects (Also die ActionScript-Repräsentation auf Client-Seite von Java-Klassen) iat komplett in den Maven-Build-Prozess dank eines 
eines entsprechenden Plugins integriert.


--------------------------------------------------------------------------------
Ab in die Wolke
--------------------------------------------------------------------------------
Pizza4U hat sich dafür entschieden, zukünftig auf eine Cloud-Infrastruktur zu setzen. Zunächst soll geklärt werdeb, was denn eine Cloud eigentlich ist und warum sich Pizza4U für diesen Weg entschieden hat. 

Cloud - Einführung
------------------
http://de.wikipedia.org/w/index.php?title=Datei:Architektur_cloudcomputing.png&filetimestamp=20090712151913
[iX / t3n]
[Grafik --> SAAS, PAAS]

Cloud-Computing beschreibt den Ansatz, Programme und Infrstruktur über das Internet zu hosten. Das angstrebte Ziel ist die Reduzierunf von Kosten, Abhängigkeiten und Engpässeen.

- Kosten-Ersparnis
	-	Wenig/verringert Administrations-Kosten
	-   Abrechnung nach Verrtbauch.
- Risiko-Minimierung
	- Erhöhgun
- Flexibilität / Skalierbarkeit

So gibt es folgende Ausprägungen von Cloud Computing
- Infrastructure as a Service (IAAS)
	- Beispiel: Amazon Elastic Compute Cloud (EC2) 
- Software as Service (PAAS)
	- Beispiel: Windows Azure von Microsoft, App Engine von Google oder force.com von Salesforce.com
- Appliation as a Setrvicee (AAAS)
	- Beispiel: Google Docs, Sharepoint Online,

Bei IAAS kan der eigene virtuelle sErver im Baukastensyste integriert werden. Da hier ein explizite Administration erfolgen muss, ist ein admin unabdingbar.

PAAS hinschreibt eher den Anwednungsrahmen. und AAA konkret noch nicht.

Entscheidung für Cloud. Warum?

--------------------------------------------------------------------------------
- Warum Google?
--------------------------------------------------------------------------------
Die Google App Engine eignet sich hervorragend auf eine Standard-Integration. Die Plattform ist sehr intuitiv zu bedienen, leicht skalierbar und erfordert 
kein Admin-Know-How, da komplett auf die Infrastruktur von Google gesetzt wird. Ideal also für ein Startup und damit für Pizza4U.
Klein, leicht skalierbar, gut geignet für Startup, da kein Admin-KnowHow erforderlich

Kein IAAS
Kein AAAS
PAAS

Beispiel Rechnung Kosten
Ab wann kostet's:
CPU Time 	n/a 	$0.10/CPU hour 	n/a 	6.50 	6.50 CPU hours
Bandwidth Out 	n/a 	$0.12/GByte 	n/a 	1.00 	1.00 GBytes
Bandwidth In 	n/a 	$0.10/GByte 	n/a 	1.00 	1.00 GBytes
Stored Data 	n/a 	$0.005/GByte-day 	n/a 	1.00 	1.00 GBytes
Recipients Emailed 	n/a 	$0.0001/Email 	n/a 	2,000.00 	2,000.00 Emails 

--------------------------------------------------------------------------------
Anbindung der Anwendung an Google
--------------------------------------------------------------------------------

- Projektstruktur
An der Projekstrucrur änder sich nicht nichts.

- Build maangement
	--> GAE: - Eclipse-Plugin | Ant | Maven - Build | Console


- Deployment, Google accounr, Jetty

- Migration:
	-  App Engine account anlegen
	- Bibliothken ins WAR --> dependency.. in Java
	- Anwendung bauen
	web.xml
	listener>
    <listener-class>org.jboss.weld.environment.servlet.Listener</listener-class>
  </listener>

  
  Zwischen TEst samt Deploy --Anwendung lkäuft. Aber. noch keine PErsistenz

--------------------------------------------------------------------------------
Persistenz
--------------------------------------------------------------------------------
http://in.relation.to/Bloggers/WeldJSF20AndGoogleAppEngineNavigatingTheMinefieldPart1

Anbindung: Hintegrund
- DB NoSQL - BigTable
- Zugriff auf DB via "Mapper" DataNucles
= RI von JDO. JPA-Hook

BigTable
--------
NoSQL, also "not only SQL", vereint die Familie der nicht relationalen Datenbanken.

Im folgenden habe ich zunächst mal ein paar bekannte Vertreter aus der NoSQL-Bewegung in Kategorien aufgelistet:
- Wide Column Store / Column Families: Google Bigtable, Hadoop / HBase (BigTable-Konzepte als OpenSource), Cassandra (freigeben von Facebook)
- Key-Value, zB.: Amazon SimpleDB
- Document Store: CouchDB

Auf NoSQL bin ich konkret bei der Verwendung von Google App Engine (GAE) stoßen. Google's Cloud speichert die persistenten Daten in Bigtable, einem propritäres DBMS. Neben GAE setzt Google bereits seit 2004 auf diese Art der Persistenz und setzt Bigtable heute unter anderem bei folgenden Anwendungen ein: Google Maps, Google Book Search, Google Earth, Blogger.com, Google Code hosting und YouTube. Das Datenvolumen umfasst deutlich mehrere Petabytes (1Petabyte = 1000 Terrabyte).
Column Store Datenbanken basieren auf dem Ansatz, Daten in Muster und Spalten-Familien zu unterteilen, was ein effizientes Speichern und Verteilen von Daten mit verwandten Attributen ermöglichen soll. Es werden mehrere Versionen eines Datenbestandes in einer Spalte verwaltet. Des Weiteren setzt Bigtable auf das in der NoSQL-Welt weit verbreitete MapReduce-Prinzip: Daten werden für Abfragen aufbereitet, ausgewählte Teile daraus in einem View abgelegt und anschließend aggregiert.

Ein Beispiel für einen programmatischen Zugriff auf Bigtable:

// Open the table
Table *T = OpenOrDie("/bigtable/web/webtable");
// Write a new anchor and delete an old anchor
RowMutation r1(T, "com.cnn.www");
r1.Set("anchor:www.c-span.org", "CNN");
r1.Delete("anchor:www.abc.com");
Operation op;
Apply(&op, &r1)

Zur Kapselung von Zugriffen dieser Art unterstützt beispielsweise Google App Engine die Anbindung von JDO und JPA, dank der entsprechenden Implementierungen von DataNucleus.

* DataNucleus
--------------
 DataNucleus ist eine open source JPA-Implementierung. Berechtigt die Frage, warum man neben EclipseLink(ehem. TopLink), Hibernate, .. noch eine weitere Implementierung benötigt? Die Antwort ist einfach: Google (-:

Google unterstützt die Verwendung von DataNucleus in Rahmen seines Cloud Computing (Google App Engine). Das spannende an DataNucleus ist, dass es nicht nur Implementierungen für JDO und JPA bereitstellt, sondern diese u.a. gegen Google's Bigtable DBMS "mappt". So sieht dann beispielsweise eine entsprechend konfigurierte persistence.xml aus:

<persistence-unit name="transactions-optional">
<provider>org.datanucleus.store.appengine.jpa.DatastorePersistenceProvider</provider>
<properties>
<property name="datanucleus.NontransactionalRead" value="true" />
<property name="datanucleus.NontransactionalWrite" value="true" />
<property name="datanucleus.ConnectionURL" value="appengine" />
</properties>
</persistence-unit>

Einschränkungen ergeben sich nicht durch DataNucleus an sich, sondern durch die darunterliegende Bigtable Datenstruktur. So gibt es beispielsweise keine Unterstützung für unique Constraints. Auch bei Queries gibt es deutliche Einschränkungen (z.B. kein UPPER oder LIKE ).
Momentan gibt es übrigens noch keine finale JPA 2.0 - Implementierung von DataNucleus.

Resitrictions und Lösung:
-nur JPA 1.0
-keine unique Constraints
- keine Many to many

Flex - https://appengine.google.com/datastore/explorer?app_id=spring-flex-gae&viewby=kind&kind=ingredient

Übernahme von Altdaten??: GSQL


fertig und test.
Link auf Test-Ptojekt


http://groups.google.com/group/google-appengine-java/web/will-it-play-in-app-engine?pli=1

--------------------------------------------------------------------------------
Administration:
--------------------------------------------------------------------------------
[screenshot]

Nachdem die Anwendung auf die Google App Enginge migriert ist, bleibt die Übernahme der IT-Infrastruktur. So müssen die bestehenden Daten der MySQL-Datenbank 
nach BiGTable portiert werden. --> http://code.google.com/intl/de-DE/appengine/docs/python/datastore/gqlqueryclass.html

Dienstleistungen auf Applikations-Server-Seite können leicht in der Google Admin Console konfiguriert werden. Diese umfassen:
- Scheduling / Timer Service
- Anbindung Google API (Maps, Picassa)
- Verwendung von Authentication mittels Google Accounts
- DB-Abfragen GQL
- Log-File-Auswertung
[Code-Beispiele??]

--------------------------------------------------------------------------------
Ausbau-Stufe --> zumindest nennen als "potentielle Erweiterungen"
--------------------------------------------------------------------------------
- Beispiel-Code und -Beschreibung vpn o.g. Punkten unter "Administrattion"
- Vertiefung Build-Prozess, Spring, Maven
- Maven Archetype?

--------------------------------------------------------------------------------
Zusammenfassung /Fazit
--------------------------------------------------------------------------------

Es ist geschafft, Pizza4U ist in der Wolke und ist damit hervorragend aufgestellt für die anstehende TV-Kampagne. Dafür werden die Ressourcen hochgefahren hochgefahren. 

Probleme der Migration konnten gelöst werden. Im laufenden Betrieb ist meinen keinen Blockern zu rechnen, das Google sich um das System kümmert und unsere Daten nur sehr kleine Bruchteile der von 
Google regelmäßig verwalteten Daten in Petabayte-Dimension darstellt.

Der Code kann auf berlin-incubator.org heruntergeladen werden und lädt explizit zum Ausprobieren ein:
1) Auschecken
2) bauen: mvn clean install
3) Lokal deployen

Die Anwendung: http://spring-flex-gae.appspot.com

Mit einer eigenen app-Id (Anpassung in der appengine.xml) kann die Anwendung auch direkt in die Google Cloud deployed werden.

Erforderliche Tools: SVN-Client, Maven, GAE SDK, IDE